{"ast":null,"code":"import _objectSpread from \"/home/dma/projects/react/e-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/dma/projects/react/e-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/dma/projects/react/e-shop/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { googleSignInStart, emailSignInStart } from \"../../redux/user/user.actions\";\nimport \"./sign-in.styles.scss\"; //descructure emailSignInStart and googleSignInStart from our props at function initiations\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const _useState = useState({\n    email: \"\",\n    password: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  const email = userCredentials.email,\n        password = userCredentials.password;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    //handles both fielsd(email and password)\n    const _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name; //spread-in all userCredentials, and update only value that needs to be changed(name or password)\n\n    setCredentials(_objectSpread({}, userCredentials, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"sign-in\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Sign-in with e-mail and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    label: \"E-mail\",\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    handleChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    label: \"Password\",\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    handleChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Sign-in\"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Sign-in with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/dma/projects/react/e-shop/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","email","password","userCredentials","setCredentials","handleSubmit","event","preventDefault","handleChange","target","value","name","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\";\n\nimport {\n  googleSignInStart,\n  emailSignInStart\n} from \"../../redux/user/user.actions\";\n\nimport \"./sign-in.styles.scss\";\n\n//descructure emailSignInStart and googleSignInStart from our props at function initiations\nconst SignIn = ({ emailSignInStart, googleSignInStart }) => {\n  const [userCredentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  const { email, password } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    //handles both fielsd(email and password)\n    const { value, name } = event.target;\n    //spread-in all userCredentials, and update only value that needs to be changed(name or password)\n    setCredentials({ ...userCredentials, [name]: value });\n  };\n\n  return (\n    <div className=\"sign-in\">\n      <h2 className=\"title\">I already have an account</h2>\n      <span>Sign-in with e-mail and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label=\"E-mail\"\n          name=\"email\"\n          type=\"email\"\n          value={email}\n          handleChange={handleChange}\n          required\n        />\n        <FormInput\n          label=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          value={password}\n          handleChange={handleChange}\n          required\n        />\n        <div className=\"buttons\">\n          <CustomButton type=\"submit\">Sign-in</CustomButton>\n          <CustomButton\n            type=\"button\"\n            onClick={googleSignInStart}\n            isGoogleSignIn\n          >\n            Sign-in with Google\n          </CustomButton>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) =>\n    dispatch(emailSignInStart({ email, password }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n"]},"metadata":{},"sourceType":"module"}