{"ast":null,"code":"import _objectSpread from \"/home/dma/projects/react/e-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, googleAuthProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nimport UserActionTypes from \"./user.types\";\nexport function* getSnashotFrtomUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    //debugging what contains returned object\n    //const userRef = yield auth.signInWithPopup(googleAuthProvider);\n    //console.log(userRef);\n    const _ref = yield auth.signInWithPopup(googleAuthProvider),\n          user = _ref.user;\n\n    yield getSnashotFrtomUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEMail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnashotFrtomUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //export function* isUserAuthenticated({\n//no Promise-based way to identify if user is logged-in\n//})\n\nexport function* onGoogleSigninStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEMailSigninStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEMail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSigninStart), call(onEMailSigninStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/home/dma/projects/react/e-shop/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleAuthProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","UserActionTypes","getSnashotFrtomUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","signInWithEMail","payload","email","password","signInWithEmailAndPassword","onGoogleSigninStart","GOOGLE_SIGN_IN_START","onEMailSigninStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","isUserAuthenticated","userSagas"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SACEC,IADF,EAEEC,kBAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,+BALP;AAOA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AACjD,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACG,yBAAD,EAA4BM,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AAEA,UAAMd,GAAG,CAACO,aAAa;AAAGQ,MAAAA,EAAE,EAAEF,YAAY,CAACE;AAApB,OAA2BF,YAAY,CAACG,IAAb,EAA3B,EAAd,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACQ,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF;AACA;AACA;AAHE,iBAKe,MAAMf,IAAI,CAACgB,eAAL,CAAqBf,kBAArB,CALrB;AAAA,UAKMgB,IALN,QAKMA,IALN;;AAMF,UAAMV,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAPD,CAOE,OAAOH,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACQ,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AAAA,kBACe,MAAMrB,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CADrB;AAAA,UACMJ,IADN,SACMA,IADN;;AAEF,UAAMV,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOH,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACQ,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;AACA;AACA;;AAEA,OAAO,UAAUS,mBAAV,GAAgC;AACrC,QAAM3B,UAAU,CAACU,eAAe,CAACkB,oBAAjB,EAAuCT,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUU,kBAAV,GAA+B;AACpC,QAAM7B,UAAU,CAACU,eAAe,CAACoB,mBAAjB,EAAsCR,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUS,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACU,eAAe,CAACsB,kBAAjB,EAAqCC,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUC,SAAV,GAAsB;AAC3B,QAAMhC,GAAG,CAAC,CACRC,IAAI,CAACwB,mBAAD,CADI,EAERxB,IAAI,CAAC0B,kBAAD,CAFI,EAGR1B,IAAI,CAAC4B,kBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport {\n  auth,\n  googleAuthProvider,\n  createUserProfileDocument,\n  getCurrentUser\n} from \"../../firebase/firebase.utils\";\n\nimport { signInSuccess, signInFailure } from \"./user.actions\";\n\nimport UserActionTypes from \"./user.types\";\n\nexport function* getSnashotFrtomUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    //debugging what contains returned object\n    //const userRef = yield auth.signInWithPopup(googleAuthProvider);\n    //console.log(userRef);\n\n    const { user } = yield auth.signInWithPopup(googleAuthProvider);\n    yield getSnashotFrtomUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEMail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnashotFrtomUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n//export function* isUserAuthenticated({\n//no Promise-based way to identify if user is logged-in\n//})\n\nexport function* onGoogleSigninStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEMailSigninStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEMail);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSigninStart),\n    call(onEMailSigninStart),\n    call(onCheckUserSession)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}