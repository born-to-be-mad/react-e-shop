{"ast":null,"code":"import _objectSpread from \"/home/dma/projects/react/e-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyADN5bybMjKtyIPrVXKrNRi1fnn3yh1uGA\",\n  authDomain: \"e-shop-db-42778.firebaseapp.com\",\n  databaseURL: \"https://e-shop-db-42778.firebaseio.com\",\n  projectId: \"e-shop-db-42778\",\n  storageBucket: \"e-shop-db-42778.appspot.com\",\n  messagingSenderId: \"237902715500\",\n  appId: \"1:237902715500:web:ed3ff71586a15503525649\",\n  measurementId: \"G-0BTVLPBPYQ\"\n};\nfirebase.initializeApp(config); //firebase.analytics();\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //query document by using QueryReference object - returns DocumentReference\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //query collections by using QueryReference object - returns CollectionReference\n\n  const collectionRef = firestore.collections(\"/users\");\n  const collectionSnapshot = await collectionRef.get();\n  console.log(\"User collection has size:\" + collectionSnapshot.size);\n  console.log({\n    collection: collectionSnapshot.docs().map(doc => doc.data())\n  }); //retrieve the snapshotObject by using .get() on DocumentReference\n\n  const userSnapShot = await userRef.get();\n\n  if (!userSnapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      //create\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(\"Collection reference:\" + collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n    batch.set(newDocRef, obj);\n  }); //fire batch call with all INSERTs\n\n  return await batch.commit(); //Promise\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n  transformedCollection.reduce(({\n    accumulator,\n    collection\n  }) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\ngoogleAuthProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleAuthProvider);\nexport default firebase;","map":{"version":3,"sources":["/home/dma/projects/react/e-shop/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collections","collectionSnapshot","get","console","log","size","collection","docs","map","data","userSnapShot","exists","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","transformedCollection","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","googleAuthProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,iCAFC;AAGbC,EAAAA,WAAW,EAAE,wCAHA;AAIbC,EAAAA,SAAS,EAAE,iBAJE;AAKbC,EAAAA,aAAa,EAAE,6BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB,E,CACA;;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe,OAD4D,CAG3E;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAJ2E,CAM3E;;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,WAAV,CAAsB,QAAtB,CAAtB;AACA,QAAMC,kBAAkB,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAjC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BH,kBAAkB,CAACI,IAA7D;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEE,IAAAA,UAAU,EAAEL,kBAAkB,CAACM,IAAnB,GAA0BC,GAA1B,CAA8BX,GAAG,IAAIA,GAAG,CAACY,IAAJ,EAArC;AAAd,GAAZ,EAV2E,CAY3E;;AACA,QAAMC,YAAY,GAAG,MAAMf,OAAO,CAACO,GAAR,EAA3B;;AAEA,MAAI,CAACQ,YAAY,CAACC,MAAlB,EAA0B;AAAA,UAChBC,WADgB,GACOnB,QADP,CAChBmB,WADgB;AAAA,UACHC,KADG,GACOpB,QADP,CACHoB,KADG;AAExB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF;AACA,YAAMpB,OAAO,CAACqB,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDpB,cAJC,EAAN;AAMD,KARD,CAQE,OAAOuB,KAAP,EAAc;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCa,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOvB,OAAP;AACD,CAjCM;AAmCP,OAAO,MAAMwB,yBAAyB,GAAG,OACvCC,aADuC,EAEvCC,YAFuC,KAGpC;AACH,QAAMtB,aAAa,GAAGH,SAAS,CAACU,UAAV,CAAqBc,aAArB,CAAtB;AACAjB,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BL,aAAtC;AACA,QAAMuB,KAAK,GAAG1B,SAAS,CAAC0B,KAAV,EAAd;AACAD,EAAAA,YAAY,CAACE,OAAb,CAAqBC,GAAG,IAAI;AAC1B,UAAMC,SAAS,GAAG1B,aAAa,CAACF,GAAd,EAAlB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYqB,SAAZ;AACAH,IAAAA,KAAK,CAACN,GAAN,CAAUS,SAAV,EAAqBD,GAArB;AACD,GAJD,EAJG,CAUH;;AACA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb,CAXG,CAW0B;AAC9B,CAfM;AAiBP,OAAO,MAAMC,+BAA+B,GAAG3B,WAAW,IAAI;AAC5D,QAAM4B,qBAAqB,GAAG5B,WAAW,CAACO,IAAZ,CAAiBC,GAAjB,CAAqBX,GAAG,IAAI;AAAA,sBAC/BA,GAAG,CAACY,IAAJ,EAD+B;AAAA,UAChDoB,KADgD,aAChDA,KADgD;AAAA,UACzCC,KADyC,aACzCA,KADyC;;AAExD,WAAO;AACLC,MAAAA,SAAS,EAAEC,SAAS,CAACH,KAAK,CAACI,WAAN,EAAD,CADf;AAELC,MAAAA,EAAE,EAAErC,GAAG,CAACqC,EAFH;AAGLL,MAAAA,KAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GAR6B,CAA9B;AAUA3B,EAAAA,OAAO,CAACC,GAAR,CAAYwB,qBAAZ;AAEAA,EAAAA,qBAAqB,CAACO,MAAtB,CAA6B,CAAC;AAAEC,IAAAA,WAAF;AAAe9B,IAAAA;AAAf,GAAD,KAAiC;AAC5D8B,IAAAA,WAAW,CAAC9B,UAAU,CAACuB,KAAX,CAAiBI,WAAjB,EAAD,CAAX,GAA8C3B,UAA9C;AACA,WAAO8B,WAAP;AACD,GAHD,EAGG,EAHH;AAID,CAjBM;AAmBP,OAAO,MAAMC,IAAI,GAAGxD,QAAQ,CAACwD,IAAT,EAAb;AACP,OAAO,MAAMzC,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAM0C,kBAAkB,GAAG,IAAIzD,QAAQ,CAACwD,IAAT,CAAcE,kBAAlB,EAA3B;AACAD,kBAAkB,CAACE,mBAAnB,CAAuC;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAvC;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,kBAArB,CAA/B;AAEP,eAAezD,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyADN5bybMjKtyIPrVXKrNRi1fnn3yh1uGA\",\n  authDomain: \"e-shop-db-42778.firebaseapp.com\",\n  databaseURL: \"https://e-shop-db-42778.firebaseio.com\",\n  projectId: \"e-shop-db-42778\",\n  storageBucket: \"e-shop-db-42778.appspot.com\",\n  messagingSenderId: \"237902715500\",\n  appId: \"1:237902715500:web:ed3ff71586a15503525649\",\n  measurementId: \"G-0BTVLPBPYQ\"\n};\n\nfirebase.initializeApp(config);\n//firebase.analytics();\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  //query document by using QueryReference object - returns DocumentReference\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  //query collections by using QueryReference object - returns CollectionReference\n  const collectionRef = firestore.collections(\"/users\");\n  const collectionSnapshot = await collectionRef.get();\n  console.log(\"User collection has size:\" + collectionSnapshot.size);\n  console.log({ collection: collectionSnapshot.docs().map(doc => doc.data()) });\n\n  //retrieve the snapshotObject by using .get() on DocumentReference\n  const userSnapShot = await userRef.get();\n\n  if (!userSnapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(\"Collection reference:\" + collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n    batch.set(newDocRef, obj);\n  });\n\n  //fire batch call with all INSERTs\n  return await batch.commit(); //Promise\n};\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n\n  console.log(transformedCollection);\n\n  transformedCollection.reduce(({ accumulator, collection }) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\ngoogleAuthProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleAuthProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}